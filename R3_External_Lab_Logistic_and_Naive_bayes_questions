{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Z66fRKOeuHPg"
   },
   "source": [
    "## Supervised Learning - Building a Student Performace Prediction System  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "YXt7PB5VuHPj"
   },
   "source": [
    "## Question 1 - Classification vs. Regression\n",
    "\n",
    "*The aim of this project is to predict how likely a student is to pass. Which type of supervised learning problem is this, classification or regression? Why?*\n",
    "\n",
    "#### Answer:\n",
    "This project is a classification supervised learning problem because the variable to predict, i.e. if a student graduates or fails to graduate, is categorical. On this case this a dichotomous categorical variable where the only two possible values are \"pass\" or \"fail\"."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "YW5BYFevuHPk"
   },
   "source": [
    "### Overview:\n",
    "\n",
    "1.Read the problem statement.\n",
    "\n",
    "2.Get the dataset.\n",
    "\n",
    "3.Explore the dataset.\n",
    "\n",
    "4.Pre-processing of dataset.\n",
    "\n",
    "5.Transform the dataset for building machine learning model.\n",
    "\n",
    "6.Split data into train, test set.\n",
    "\n",
    "7.Build Model.\n",
    "\n",
    "8.Apply the model.\n",
    "\n",
    "9.Evaluate the model.\n",
    "\n",
    "10.Provide insights."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "0gl2MdwkuHPl"
   },
   "source": [
    "## Problem Statement \n",
    "\n",
    "Using Logistic Regression **predict the performance of student**. The classification goal is to predict whether the student will pass or fail.\n",
    "\n",
    "## Dataset \n",
    "\n",
    "This data approach student achievement in secondary education of two Portuguese schools. The data attributes include student grades, demographic, social and school related features) and it was collected by using school reports and questionnaires. Two datasets are provided regarding the performance in Mathematics.\n",
    "\n",
    "**Source:** https://archive.ics.uci.edu/ml/datasets/Student+Performance\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "cHpGO_AGuHPm"
   },
   "source": [
    "## Question 2\n",
    "## Exploring the Data\n",
    "*Read the dataset file using pandas. Take care about the delimiter.*\n",
    "\n",
    "#### Answer:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "q3YEgKevuHPn"
   },
   "outputs": [],
   "source": [
    "#Importing necessary libraries\n",
    "%matplotlib inline \n",
    "import pandas as pd\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "import matplotlib.pyplot as plt \n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "import numpy as np\n",
    "from sklearn import metrics\n",
    "from sklearn import preprocessing\n",
    "from sklearn import model_selection\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.preprocessing import StandardScaler "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "KHyQrv_muHPr",
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "st_df = pd.read_csv('students-data.csv', sep = ';')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>school</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>address</th>\n",
       "      <th>famsize</th>\n",
       "      <th>Pstatus</th>\n",
       "      <th>Medu</th>\n",
       "      <th>Fedu</th>\n",
       "      <th>Mjob</th>\n",
       "      <th>Fjob</th>\n",
       "      <th>...</th>\n",
       "      <th>famrel</th>\n",
       "      <th>freetime</th>\n",
       "      <th>goout</th>\n",
       "      <th>Dalc</th>\n",
       "      <th>Walc</th>\n",
       "      <th>health</th>\n",
       "      <th>absences</th>\n",
       "      <th>G1</th>\n",
       "      <th>G2</th>\n",
       "      <th>G3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>18</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>A</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>at_home</td>\n",
       "      <td>teacher</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>17</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>at_home</td>\n",
       "      <td>other</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>15</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>at_home</td>\n",
       "      <td>other</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>15</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>health</td>\n",
       "      <td>services</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>16</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  school sex  age address famsize Pstatus  Medu  Fedu     Mjob      Fjob ...  \\\n",
       "0     GP   F   18       U     GT3       A     4     4  at_home   teacher ...   \n",
       "1     GP   F   17       U     GT3       T     1     1  at_home     other ...   \n",
       "2     GP   F   15       U     LE3       T     1     1  at_home     other ...   \n",
       "3     GP   F   15       U     GT3       T     4     2   health  services ...   \n",
       "4     GP   F   16       U     GT3       T     3     3    other     other ...   \n",
       "\n",
       "  famrel freetime  goout  Dalc  Walc health absences  G1  G2  G3  \n",
       "0      4        3      4     1     1      3        6   5   6   6  \n",
       "1      5        3      3     1     1      3        4   5   5   6  \n",
       "2      4        3      2     2     3      3       10   7   8  10  \n",
       "3      3        2      2     1     1      5        2  15  14  15  \n",
       "4      4        3      2     1     2      5        4   6  10  10  \n",
       "\n",
       "[5 rows x 33 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 395 entries, 0 to 394\n",
      "Data columns (total 33 columns):\n",
      "school        395 non-null object\n",
      "sex           395 non-null object\n",
      "age           395 non-null int64\n",
      "address       395 non-null object\n",
      "famsize       395 non-null object\n",
      "Pstatus       395 non-null object\n",
      "Medu          395 non-null int64\n",
      "Fedu          395 non-null int64\n",
      "Mjob          395 non-null object\n",
      "Fjob          395 non-null object\n",
      "reason        395 non-null object\n",
      "guardian      395 non-null object\n",
      "traveltime    395 non-null int64\n",
      "studytime     395 non-null int64\n",
      "failures      395 non-null int64\n",
      "schoolsup     395 non-null object\n",
      "famsup        395 non-null object\n",
      "paid          395 non-null object\n",
      "activities    395 non-null object\n",
      "nursery       395 non-null object\n",
      "higher        395 non-null object\n",
      "internet      395 non-null object\n",
      "romantic      395 non-null object\n",
      "famrel        395 non-null int64\n",
      "freetime      395 non-null int64\n",
      "goout         395 non-null int64\n",
      "Dalc          395 non-null int64\n",
      "Walc          395 non-null int64\n",
      "health        395 non-null int64\n",
      "absences      395 non-null int64\n",
      "G1            395 non-null int64\n",
      "G2            395 non-null int64\n",
      "G3            395 non-null int64\n",
      "dtypes: int64(16), object(17)\n",
      "memory usage: 101.9+ KB\n"
     ]
    }
   ],
   "source": [
    "st_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(395, 33)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st_df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "BuwsTmYuuHPu"
   },
   "source": [
    "## Question 3\n",
    "## Drop missing values\n",
    "*Set the index name of the dataframe to **\"number\"**. Check sample of data to drop if any missing values are there.*\n",
    "\n",
    "#### Answer:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "EWbnH1HIuHPv"
   },
   "outputs": [],
   "source": [
    "st_df.index.name = \"number\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>unique</th>\n",
       "      <th>top</th>\n",
       "      <th>freq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>school</th>\n",
       "      <td>395</td>\n",
       "      <td>2</td>\n",
       "      <td>GP</td>\n",
       "      <td>349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sex</th>\n",
       "      <td>395</td>\n",
       "      <td>2</td>\n",
       "      <td>F</td>\n",
       "      <td>208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>address</th>\n",
       "      <td>395</td>\n",
       "      <td>2</td>\n",
       "      <td>U</td>\n",
       "      <td>307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>famsize</th>\n",
       "      <td>395</td>\n",
       "      <td>2</td>\n",
       "      <td>GT3</td>\n",
       "      <td>281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pstatus</th>\n",
       "      <td>395</td>\n",
       "      <td>2</td>\n",
       "      <td>T</td>\n",
       "      <td>354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mjob</th>\n",
       "      <td>395</td>\n",
       "      <td>5</td>\n",
       "      <td>other</td>\n",
       "      <td>141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fjob</th>\n",
       "      <td>395</td>\n",
       "      <td>5</td>\n",
       "      <td>other</td>\n",
       "      <td>217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reason</th>\n",
       "      <td>395</td>\n",
       "      <td>4</td>\n",
       "      <td>course</td>\n",
       "      <td>145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>guardian</th>\n",
       "      <td>395</td>\n",
       "      <td>3</td>\n",
       "      <td>mother</td>\n",
       "      <td>273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>schoolsup</th>\n",
       "      <td>395</td>\n",
       "      <td>2</td>\n",
       "      <td>no</td>\n",
       "      <td>344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>famsup</th>\n",
       "      <td>395</td>\n",
       "      <td>2</td>\n",
       "      <td>yes</td>\n",
       "      <td>242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>paid</th>\n",
       "      <td>395</td>\n",
       "      <td>2</td>\n",
       "      <td>no</td>\n",
       "      <td>214</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>activities</th>\n",
       "      <td>395</td>\n",
       "      <td>2</td>\n",
       "      <td>yes</td>\n",
       "      <td>201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nursery</th>\n",
       "      <td>395</td>\n",
       "      <td>2</td>\n",
       "      <td>yes</td>\n",
       "      <td>314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>higher</th>\n",
       "      <td>395</td>\n",
       "      <td>2</td>\n",
       "      <td>yes</td>\n",
       "      <td>375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>internet</th>\n",
       "      <td>395</td>\n",
       "      <td>2</td>\n",
       "      <td>yes</td>\n",
       "      <td>329</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>romantic</th>\n",
       "      <td>395</td>\n",
       "      <td>2</td>\n",
       "      <td>no</td>\n",
       "      <td>263</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           count unique     top freq\n",
       "school       395      2      GP  349\n",
       "sex          395      2       F  208\n",
       "address      395      2       U  307\n",
       "famsize      395      2     GT3  281\n",
       "Pstatus      395      2       T  354\n",
       "Mjob         395      5   other  141\n",
       "Fjob         395      5   other  217\n",
       "reason       395      4  course  145\n",
       "guardian     395      3  mother  273\n",
       "schoolsup    395      2      no  344\n",
       "famsup       395      2     yes  242\n",
       "paid         395      2      no  214\n",
       "activities   395      2     yes  201\n",
       "nursery      395      2     yes  314\n",
       "higher       395      2     yes  375\n",
       "internet     395      2     yes  329\n",
       "romantic     395      2      no  263"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st_df.describe(include='object').T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### There are no missing data in any of the categorical attributes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>395.0</td>\n",
       "      <td>16.696203</td>\n",
       "      <td>1.276043</td>\n",
       "      <td>15.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Medu</th>\n",
       "      <td>395.0</td>\n",
       "      <td>2.749367</td>\n",
       "      <td>1.094735</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fedu</th>\n",
       "      <td>395.0</td>\n",
       "      <td>2.521519</td>\n",
       "      <td>1.088201</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>traveltime</th>\n",
       "      <td>395.0</td>\n",
       "      <td>1.448101</td>\n",
       "      <td>0.697505</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>studytime</th>\n",
       "      <td>395.0</td>\n",
       "      <td>2.035443</td>\n",
       "      <td>0.839240</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>failures</th>\n",
       "      <td>395.0</td>\n",
       "      <td>0.334177</td>\n",
       "      <td>0.743651</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>famrel</th>\n",
       "      <td>395.0</td>\n",
       "      <td>3.944304</td>\n",
       "      <td>0.896659</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freetime</th>\n",
       "      <td>395.0</td>\n",
       "      <td>3.235443</td>\n",
       "      <td>0.998862</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>goout</th>\n",
       "      <td>395.0</td>\n",
       "      <td>3.108861</td>\n",
       "      <td>1.113278</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dalc</th>\n",
       "      <td>395.0</td>\n",
       "      <td>1.481013</td>\n",
       "      <td>0.890741</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Walc</th>\n",
       "      <td>395.0</td>\n",
       "      <td>2.291139</td>\n",
       "      <td>1.287897</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>health</th>\n",
       "      <td>395.0</td>\n",
       "      <td>3.554430</td>\n",
       "      <td>1.390303</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>absences</th>\n",
       "      <td>395.0</td>\n",
       "      <td>5.708861</td>\n",
       "      <td>8.003096</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G1</th>\n",
       "      <td>395.0</td>\n",
       "      <td>10.908861</td>\n",
       "      <td>3.319195</td>\n",
       "      <td>3.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G2</th>\n",
       "      <td>395.0</td>\n",
       "      <td>10.713924</td>\n",
       "      <td>3.761505</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G3</th>\n",
       "      <td>395.0</td>\n",
       "      <td>10.415190</td>\n",
       "      <td>4.581443</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>20.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            count       mean       std   min   25%   50%   75%   max\n",
       "age         395.0  16.696203  1.276043  15.0  16.0  17.0  18.0  22.0\n",
       "Medu        395.0   2.749367  1.094735   0.0   2.0   3.0   4.0   4.0\n",
       "Fedu        395.0   2.521519  1.088201   0.0   2.0   2.0   3.0   4.0\n",
       "traveltime  395.0   1.448101  0.697505   1.0   1.0   1.0   2.0   4.0\n",
       "studytime   395.0   2.035443  0.839240   1.0   1.0   2.0   2.0   4.0\n",
       "failures    395.0   0.334177  0.743651   0.0   0.0   0.0   0.0   3.0\n",
       "famrel      395.0   3.944304  0.896659   1.0   4.0   4.0   5.0   5.0\n",
       "freetime    395.0   3.235443  0.998862   1.0   3.0   3.0   4.0   5.0\n",
       "goout       395.0   3.108861  1.113278   1.0   2.0   3.0   4.0   5.0\n",
       "Dalc        395.0   1.481013  0.890741   1.0   1.0   1.0   2.0   5.0\n",
       "Walc        395.0   2.291139  1.287897   1.0   1.0   2.0   3.0   5.0\n",
       "health      395.0   3.554430  1.390303   1.0   3.0   4.0   5.0   5.0\n",
       "absences    395.0   5.708861  8.003096   0.0   0.0   4.0   8.0  75.0\n",
       "G1          395.0  10.908861  3.319195   3.0   8.0  11.0  13.0  19.0\n",
       "G2          395.0  10.713924  3.761505   0.0   9.0  11.0  13.0  19.0\n",
       "G3          395.0  10.415190  4.581443   0.0   8.0  11.0  14.0  20.0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st_df.describe(include='int64').T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### No missing data across all the numerical variables as well. Some columns have 0 values in them but all of them make sense hence replacing 0s are also not required"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "2_P3ODMKuHP2"
   },
   "source": [
    "## Transform Data\n",
    "\n",
    "*Print all the attribute names which are not numerical.*\n",
    "\n",
    "**Hint:** check **select_dtypes()** and its **include** and **exclude** parameters.**\n",
    "\n",
    "#### Answer:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "bW1v3TuZuHP3"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>school</th>\n",
       "      <th>sex</th>\n",
       "      <th>address</th>\n",
       "      <th>famsize</th>\n",
       "      <th>Pstatus</th>\n",
       "      <th>Mjob</th>\n",
       "      <th>Fjob</th>\n",
       "      <th>reason</th>\n",
       "      <th>guardian</th>\n",
       "      <th>schoolsup</th>\n",
       "      <th>famsup</th>\n",
       "      <th>paid</th>\n",
       "      <th>activities</th>\n",
       "      <th>nursery</th>\n",
       "      <th>higher</th>\n",
       "      <th>internet</th>\n",
       "      <th>romantic</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>number</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>A</td>\n",
       "      <td>at_home</td>\n",
       "      <td>teacher</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>at_home</td>\n",
       "      <td>other</td>\n",
       "      <td>course</td>\n",
       "      <td>father</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>at_home</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>mother</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>health</td>\n",
       "      <td>services</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>home</td>\n",
       "      <td>father</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>services</td>\n",
       "      <td>other</td>\n",
       "      <td>reputation</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>A</td>\n",
       "      <td>other</td>\n",
       "      <td>teacher</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>A</td>\n",
       "      <td>services</td>\n",
       "      <td>other</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>teacher</td>\n",
       "      <td>health</td>\n",
       "      <td>reputation</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>services</td>\n",
       "      <td>other</td>\n",
       "      <td>reputation</td>\n",
       "      <td>father</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>health</td>\n",
       "      <td>services</td>\n",
       "      <td>course</td>\n",
       "      <td>father</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>teacher</td>\n",
       "      <td>other</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>A</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>home</td>\n",
       "      <td>other</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>health</td>\n",
       "      <td>other</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>services</td>\n",
       "      <td>services</td>\n",
       "      <td>reputation</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>reputation</td>\n",
       "      <td>mother</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>services</td>\n",
       "      <td>services</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>health</td>\n",
       "      <td>other</td>\n",
       "      <td>home</td>\n",
       "      <td>father</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>teacher</td>\n",
       "      <td>other</td>\n",
       "      <td>reputation</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>health</td>\n",
       "      <td>health</td>\n",
       "      <td>other</td>\n",
       "      <td>father</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>teacher</td>\n",
       "      <td>other</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>reputation</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>services</td>\n",
       "      <td>health</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>services</td>\n",
       "      <td>services</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>health</td>\n",
       "      <td>services</td>\n",
       "      <td>other</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>A</td>\n",
       "      <td>services</td>\n",
       "      <td>other</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>teacher</td>\n",
       "      <td>teacher</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>365</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>at_home</td>\n",
       "      <td>other</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>366</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>teacher</td>\n",
       "      <td>services</td>\n",
       "      <td>other</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>367</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>services</td>\n",
       "      <td>reputation</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>368</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>at_home</td>\n",
       "      <td>services</td>\n",
       "      <td>course</td>\n",
       "      <td>father</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>369</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>teacher</td>\n",
       "      <td>other</td>\n",
       "      <td>father</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>370</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>services</td>\n",
       "      <td>services</td>\n",
       "      <td>home</td>\n",
       "      <td>other</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>371</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>R</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>at_home</td>\n",
       "      <td>services</td>\n",
       "      <td>other</td>\n",
       "      <td>father</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>372</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>at_home</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>373</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>374</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>R</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>reputation</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>375</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>health</td>\n",
       "      <td>other</td>\n",
       "      <td>course</td>\n",
       "      <td>other</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>R</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>teacher</td>\n",
       "      <td>services</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>378</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>at_home</td>\n",
       "      <td>other</td>\n",
       "      <td>reputation</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>380</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>teacher</td>\n",
       "      <td>teacher</td>\n",
       "      <td>home</td>\n",
       "      <td>father</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>381</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>382</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>services</td>\n",
       "      <td>home</td>\n",
       "      <td>father</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>383</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>services</td>\n",
       "      <td>other</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>384</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>home</td>\n",
       "      <td>father</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>385</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>at_home</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>386</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>teacher</td>\n",
       "      <td>at_home</td>\n",
       "      <td>reputation</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>387</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>services</td>\n",
       "      <td>other</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>388</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>teacher</td>\n",
       "      <td>services</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>389</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>390</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>A</td>\n",
       "      <td>services</td>\n",
       "      <td>services</td>\n",
       "      <td>course</td>\n",
       "      <td>other</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>391</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>services</td>\n",
       "      <td>services</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>392</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>course</td>\n",
       "      <td>other</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>393</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>R</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>services</td>\n",
       "      <td>other</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>394</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>other</td>\n",
       "      <td>at_home</td>\n",
       "      <td>course</td>\n",
       "      <td>father</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>395 rows Ã— 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       school sex address famsize Pstatus      Mjob      Fjob      reason  \\\n",
       "number                                                                      \n",
       "0          GP   F       U     GT3       A   at_home   teacher      course   \n",
       "1          GP   F       U     GT3       T   at_home     other      course   \n",
       "2          GP   F       U     LE3       T   at_home     other       other   \n",
       "3          GP   F       U     GT3       T    health  services        home   \n",
       "4          GP   F       U     GT3       T     other     other        home   \n",
       "5          GP   M       U     LE3       T  services     other  reputation   \n",
       "6          GP   M       U     LE3       T     other     other        home   \n",
       "7          GP   F       U     GT3       A     other   teacher        home   \n",
       "8          GP   M       U     LE3       A  services     other        home   \n",
       "9          GP   M       U     GT3       T     other     other        home   \n",
       "10         GP   F       U     GT3       T   teacher    health  reputation   \n",
       "11         GP   F       U     GT3       T  services     other  reputation   \n",
       "12         GP   M       U     LE3       T    health  services      course   \n",
       "13         GP   M       U     GT3       T   teacher     other      course   \n",
       "14         GP   M       U     GT3       A     other     other        home   \n",
       "15         GP   F       U     GT3       T    health     other        home   \n",
       "16         GP   F       U     GT3       T  services  services  reputation   \n",
       "17         GP   F       U     GT3       T     other     other  reputation   \n",
       "18         GP   M       U     GT3       T  services  services      course   \n",
       "19         GP   M       U     LE3       T    health     other        home   \n",
       "20         GP   M       U     GT3       T   teacher     other  reputation   \n",
       "21         GP   M       U     GT3       T    health    health       other   \n",
       "22         GP   M       U     LE3       T   teacher     other      course   \n",
       "23         GP   M       U     LE3       T     other     other  reputation   \n",
       "24         GP   F       R     GT3       T  services    health      course   \n",
       "25         GP   F       U     GT3       T  services  services        home   \n",
       "26         GP   M       U     GT3       T     other     other        home   \n",
       "27         GP   M       U     GT3       T    health  services       other   \n",
       "28         GP   M       U     LE3       A  services     other        home   \n",
       "29         GP   M       U     GT3       T   teacher   teacher        home   \n",
       "...       ...  ..     ...     ...     ...       ...       ...         ...   \n",
       "365        MS   M       R     GT3       T   at_home     other      course   \n",
       "366        MS   M       U     LE3       T   teacher  services       other   \n",
       "367        MS   F       R     GT3       T     other  services  reputation   \n",
       "368        MS   F       U     GT3       T   at_home  services      course   \n",
       "369        MS   F       R     GT3       T     other   teacher       other   \n",
       "370        MS   F       U     LE3       T  services  services        home   \n",
       "371        MS   M       R     LE3       T   at_home  services       other   \n",
       "372        MS   F       U     GT3       T     other   at_home        home   \n",
       "373        MS   F       R     GT3       T     other     other      course   \n",
       "374        MS   F       R     LE3       T     other     other  reputation   \n",
       "375        MS   F       R     GT3       T     other     other        home   \n",
       "376        MS   F       U     GT3       T    health     other      course   \n",
       "377        MS   F       R     LE3       T   teacher  services      course   \n",
       "378        MS   F       U     GT3       T     other     other        home   \n",
       "379        MS   F       R     GT3       T   at_home     other  reputation   \n",
       "380        MS   M       U     GT3       T   teacher   teacher        home   \n",
       "381        MS   M       R     GT3       T     other     other       other   \n",
       "382        MS   M       U     GT3       T     other  services        home   \n",
       "383        MS   M       R     GT3       T     other  services       other   \n",
       "384        MS   M       R     GT3       T     other     other        home   \n",
       "385        MS   F       R     GT3       T   at_home     other       other   \n",
       "386        MS   F       R     GT3       T   teacher   at_home  reputation   \n",
       "387        MS   F       R     GT3       T  services     other      course   \n",
       "388        MS   F       U     LE3       T   teacher  services      course   \n",
       "389        MS   F       U     GT3       T     other     other      course   \n",
       "390        MS   M       U     LE3       A  services  services      course   \n",
       "391        MS   M       U     LE3       T  services  services      course   \n",
       "392        MS   M       R     GT3       T     other     other      course   \n",
       "393        MS   M       R     LE3       T  services     other      course   \n",
       "394        MS   M       U     LE3       T     other   at_home      course   \n",
       "\n",
       "       guardian schoolsup famsup paid activities nursery higher internet  \\\n",
       "number                                                                     \n",
       "0        mother       yes     no   no         no     yes    yes       no   \n",
       "1        father        no    yes   no         no      no    yes      yes   \n",
       "2        mother       yes     no  yes         no     yes    yes      yes   \n",
       "3        mother        no    yes  yes        yes     yes    yes      yes   \n",
       "4        father        no    yes  yes         no     yes    yes       no   \n",
       "5        mother        no    yes  yes        yes     yes    yes      yes   \n",
       "6        mother        no     no   no         no     yes    yes      yes   \n",
       "7        mother       yes    yes   no         no     yes    yes       no   \n",
       "8        mother        no    yes  yes         no     yes    yes      yes   \n",
       "9        mother        no    yes  yes        yes     yes    yes      yes   \n",
       "10       mother        no    yes  yes         no     yes    yes      yes   \n",
       "11       father        no    yes   no        yes     yes    yes      yes   \n",
       "12       father        no    yes  yes        yes     yes    yes      yes   \n",
       "13       mother        no    yes  yes         no     yes    yes      yes   \n",
       "14        other        no    yes   no         no     yes    yes      yes   \n",
       "15       mother        no    yes   no         no     yes    yes      yes   \n",
       "16       mother        no    yes  yes        yes     yes    yes      yes   \n",
       "17       mother       yes    yes   no        yes     yes    yes       no   \n",
       "18       mother        no    yes   no        yes     yes    yes      yes   \n",
       "19       father        no     no  yes        yes     yes    yes      yes   \n",
       "20       mother        no     no   no         no     yes    yes      yes   \n",
       "21       father        no    yes  yes         no     yes    yes      yes   \n",
       "22       mother        no     no   no        yes     yes    yes      yes   \n",
       "23       mother        no    yes   no        yes     yes    yes      yes   \n",
       "24       mother       yes    yes  yes        yes     yes    yes      yes   \n",
       "25       mother        no    yes  yes         no      no    yes      yes   \n",
       "26       mother        no    yes  yes         no     yes    yes      yes   \n",
       "27       mother        no     no  yes         no     yes    yes      yes   \n",
       "28       mother       yes    yes   no        yes     yes    yes      yes   \n",
       "29       mother        no    yes  yes        yes     yes    yes      yes   \n",
       "...         ...       ...    ...  ...        ...     ...    ...      ...   \n",
       "365      mother        no    yes  yes         no     yes    yes       no   \n",
       "366      mother        no     no  yes         no     yes    yes      yes   \n",
       "367      mother        no    yes  yes         no     yes    yes      yes   \n",
       "368      father        no    yes  yes         no     yes    yes      yes   \n",
       "369      father        no    yes  yes         no      no    yes      yes   \n",
       "370       other        no     no   no        yes     yes    yes       no   \n",
       "371      father        no    yes  yes        yes     yes     no      yes   \n",
       "372      mother        no     no   no        yes     yes    yes       no   \n",
       "373      mother        no     no   no        yes     yes    yes      yes   \n",
       "374      mother        no     no   no         no     yes    yes      yes   \n",
       "375      mother        no     no   no         no     yes    yes      yes   \n",
       "376       other        no    yes  yes         no      no    yes      yes   \n",
       "377      mother        no     no  yes        yes     yes    yes      yes   \n",
       "378      mother        no     no  yes         no     yes    yes      yes   \n",
       "379      mother        no    yes  yes        yes      no    yes      yes   \n",
       "380      father        no     no  yes        yes      no    yes      yes   \n",
       "381      mother        no     no   no        yes      no    yes      yes   \n",
       "382      father        no     no   no        yes     yes    yes      yes   \n",
       "383      mother        no     no   no         no     yes    yes       no   \n",
       "384      father        no     no  yes         no     yes    yes       no   \n",
       "385      mother        no     no  yes         no     yes    yes       no   \n",
       "386      mother        no    yes  yes        yes     yes    yes      yes   \n",
       "387      mother        no     no   no        yes      no    yes      yes   \n",
       "388      mother        no    yes  yes         no     yes    yes      yes   \n",
       "389      mother        no     no   no        yes     yes    yes       no   \n",
       "390       other        no    yes  yes         no     yes    yes       no   \n",
       "391      mother        no     no   no         no      no    yes      yes   \n",
       "392       other        no     no   no         no      no    yes       no   \n",
       "393      mother        no     no   no         no      no    yes      yes   \n",
       "394      father        no     no   no         no     yes    yes      yes   \n",
       "\n",
       "       romantic  \n",
       "number           \n",
       "0            no  \n",
       "1            no  \n",
       "2            no  \n",
       "3           yes  \n",
       "4            no  \n",
       "5            no  \n",
       "6            no  \n",
       "7            no  \n",
       "8            no  \n",
       "9            no  \n",
       "10           no  \n",
       "11           no  \n",
       "12           no  \n",
       "13           no  \n",
       "14          yes  \n",
       "15           no  \n",
       "16           no  \n",
       "17           no  \n",
       "18           no  \n",
       "19           no  \n",
       "20           no  \n",
       "21           no  \n",
       "22           no  \n",
       "23           no  \n",
       "24           no  \n",
       "25           no  \n",
       "26           no  \n",
       "27           no  \n",
       "28           no  \n",
       "29          yes  \n",
       "...         ...  \n",
       "365          no  \n",
       "366         yes  \n",
       "367         yes  \n",
       "368         yes  \n",
       "369         yes  \n",
       "370         yes  \n",
       "371         yes  \n",
       "372         yes  \n",
       "373          no  \n",
       "374          no  \n",
       "375          no  \n",
       "376         yes  \n",
       "377          no  \n",
       "378         yes  \n",
       "379          no  \n",
       "380          no  \n",
       "381         yes  \n",
       "382          no  \n",
       "383          no  \n",
       "384          no  \n",
       "385          no  \n",
       "386         yes  \n",
       "387          no  \n",
       "388          no  \n",
       "389          no  \n",
       "390          no  \n",
       "391          no  \n",
       "392          no  \n",
       "393          no  \n",
       "394          no  \n",
       "\n",
       "[395 rows x 17 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st_df.select_dtypes(include='object')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Displaying all the 16 attributes that are not numerical"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "zTXZpxq5uHP7"
   },
   "source": [
    "## Drop variables with less variance\n",
    "\n",
    "*Find the variance of each numerical independent variable and drop whose variance is less than 1.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "0Soz0W4vuHP8"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age            1.628285\n",
       "Medu           1.198445\n",
       "Fedu           1.184180\n",
       "traveltime     0.486513\n",
       "studytime      0.704324\n",
       "failures       0.553017\n",
       "famrel         0.803997\n",
       "freetime       0.997725\n",
       "goout          1.239388\n",
       "Dalc           0.793420\n",
       "Walc           1.658678\n",
       "health         1.932944\n",
       "absences      64.049541\n",
       "G1            11.017053\n",
       "G2            14.148917\n",
       "G3            20.989616\n",
       "dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st_df.var(axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "u8Qm0728uHQA"
   },
   "source": [
    "#### 'traveltime','studytime','failures','famrel','freetime','Dalc' all have var less than 1hence we are dropping all of them from the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "a0NDh0lTuHQE"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['school', 'sex', 'age', 'address', 'famsize', 'Pstatus', 'Medu', 'Fedu',\n",
       "       'Mjob', 'Fjob', 'reason', 'guardian', 'traveltime', 'studytime',\n",
       "       'failures', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery',\n",
       "       'higher', 'internet', 'romantic', 'famrel', 'freetime', 'goout', 'Dalc',\n",
       "       'Walc', 'health', 'absences', 'G1', 'G2', 'G3'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df.drop(['traveltime','studytime','failures','famrel','freetime','Dalc'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(395, 27)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st_df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "3Y2CYTIXuHQJ"
   },
   "source": [
    "## Question 4 - Encode all categorical variables to numerical\n",
    "\n",
    "Take the list of categorical attributes(from the above result) and convert them into neumerical variables. After that, print the head of dataframe and check the values.\n",
    "\n",
    "**Hint:** check **sklearn LabelEncoder()**\n",
    "\n",
    "#### Answer:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ZmNpYg_WuHQK"
   },
   "outputs": [],
   "source": [
    "label_encoder = preprocessing.LabelEncoder()\n",
    "st_df['school']= label_encoder.fit_transform(st_df['school'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df['sex']= label_encoder.fit_transform(st_df['sex'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df['address']= label_encoder.fit_transform(st_df['address'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df['famsize']= label_encoder.fit_transform(st_df['famsize'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df['Pstatus']= label_encoder.fit_transform(st_df['Pstatus'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df['Mjob']= label_encoder.fit_transform(st_df['Mjob'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df['Fjob']= label_encoder.fit_transform(st_df['Fjob'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df['reason']= label_encoder.fit_transform(st_df['reason'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df['guardian']= label_encoder.fit_transform(st_df['guardian'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df['schoolsup']= label_encoder.fit_transform(st_df['schoolsup'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df['famsup']= label_encoder.fit_transform(st_df['famsup'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df['paid']= label_encoder.fit_transform(st_df['paid'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df['activities']= label_encoder.fit_transform(st_df['activities'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df['nursery']= label_encoder.fit_transform(st_df['nursery'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df['higher']= label_encoder.fit_transform(st_df['higher'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df['internet']= label_encoder.fit_transform(st_df['internet'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df['romantic']= label_encoder.fit_transform(st_df['romantic'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>school</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>address</th>\n",
       "      <th>famsize</th>\n",
       "      <th>Pstatus</th>\n",
       "      <th>Medu</th>\n",
       "      <th>Fedu</th>\n",
       "      <th>Mjob</th>\n",
       "      <th>Fjob</th>\n",
       "      <th>...</th>\n",
       "      <th>higher</th>\n",
       "      <th>internet</th>\n",
       "      <th>romantic</th>\n",
       "      <th>goout</th>\n",
       "      <th>Walc</th>\n",
       "      <th>health</th>\n",
       "      <th>absences</th>\n",
       "      <th>G1</th>\n",
       "      <th>G2</th>\n",
       "      <th>G3</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>number</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        school  sex  age  address  famsize  Pstatus  Medu  Fedu  Mjob  Fjob  \\\n",
       "number                                                                        \n",
       "0            0    0   18        1        0        0     4     4     0     4   \n",
       "1            0    0   17        1        0        1     1     1     0     2   \n",
       "2            0    0   15        1        1        1     1     1     0     2   \n",
       "3            0    0   15        1        0        1     4     2     1     3   \n",
       "4            0    0   16        1        0        1     3     3     2     2   \n",
       "\n",
       "       ...  higher  internet  romantic  goout  Walc  health  absences  G1  G2  \\\n",
       "number ...                                                                      \n",
       "0      ...       1         0         0      4     1       3         6   5   6   \n",
       "1      ...       1         1         0      3     1       3         4   5   5   \n",
       "2      ...       1         1         0      2     3       3        10   7   8   \n",
       "3      ...       1         1         1      2     1       5         2  15  14   \n",
       "4      ...       1         0         0      2     2       5         4   6  10   \n",
       "\n",
       "        G3  \n",
       "number      \n",
       "0        6  \n",
       "1        6  \n",
       "2       10  \n",
       "3       15  \n",
       "4       10  \n",
       "\n",
       "[5 rows x 27 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "4W-GbCYXuHQO"
   },
   "source": [
    "## Question 5 - Convert the continuous values of grades into classes\n",
    "\n",
    "*Consider the values in G1, G2 and G3 with >= 10 as pass(1) and < 10 as fail(0) and encode them into binary values. Print head of dataframe to check the values.*\n",
    "\n",
    "#### Answer:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "SlELxBQ0uHQP"
   },
   "outputs": [],
   "source": [
    "st_df[\"G1\"] = np.where(st_df[\"G1\"] >= 10,\"1\",\"0\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df[\"G2\"] = np.where(st_df[\"G2\"] >= 10,\"1\",\"0\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_df[\"G3\"] = np.where(st_df[\"G3\"] >= 10,\"1\",\"0\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>school</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>address</th>\n",
       "      <th>famsize</th>\n",
       "      <th>Pstatus</th>\n",
       "      <th>Medu</th>\n",
       "      <th>Fedu</th>\n",
       "      <th>Mjob</th>\n",
       "      <th>Fjob</th>\n",
       "      <th>...</th>\n",
       "      <th>higher</th>\n",
       "      <th>internet</th>\n",
       "      <th>romantic</th>\n",
       "      <th>goout</th>\n",
       "      <th>Walc</th>\n",
       "      <th>health</th>\n",
       "      <th>absences</th>\n",
       "      <th>G1</th>\n",
       "      <th>G2</th>\n",
       "      <th>G3</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>number</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        school  sex  age  address  famsize  Pstatus  Medu  Fedu  Mjob  Fjob  \\\n",
       "number                                                                        \n",
       "0            0    0   18        1        0        0     4     4     0     4   \n",
       "1            0    0   17        1        0        1     1     1     0     2   \n",
       "2            0    0   15        1        1        1     1     1     0     2   \n",
       "3            0    0   15        1        0        1     4     2     1     3   \n",
       "4            0    0   16        1        0        1     3     3     2     2   \n",
       "\n",
       "       ...  higher  internet  romantic  goout  Walc  health  absences  G1  G2  \\\n",
       "number ...                                                                      \n",
       "0      ...       1         0         0      4     1       3         6   0   0   \n",
       "1      ...       1         1         0      3     1       3         4   0   0   \n",
       "2      ...       1         1         0      2     3       3        10   0   0   \n",
       "3      ...       1         1         1      2     1       5         2   1   1   \n",
       "4      ...       1         0         0      2     2       5         4   0   1   \n",
       "\n",
       "        G3  \n",
       "number      \n",
       "0        0  \n",
       "1        0  \n",
       "2        1  \n",
       "3        1  \n",
       "4        1  \n",
       "\n",
       "[5 rows x 27 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "kO7O6UW3uHQU"
   },
   "source": [
    "## Question 6 \n",
    "*Consider G3 is the target attribute and remaining all attributes as features to predict G3. Now, separate features and target into separate dataframes and name them X and y respectively.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = st_df.drop('G3', axis=1)\n",
    "y = st_df[['G3']] "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "_CP-ZqsPuHQa"
   },
   "source": [
    "## Visualization\n",
    "\n",
    "## Question 7\n",
    "\n",
    "*Plot G2 and G3 and give your understanding on relation between both variables.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c9db112f98>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot('G2',hue='G3',data=st_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "wqefid55uHQg"
   },
   "source": [
    "#### Whenever G2 = 0, most G3 values are equal to 0; where as when G2=1, most G3 values are equal to 1 strongly suggesting G2 is a good predictor for G3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "8O10W9U6uHQh"
   },
   "source": [
    "## Question 8\n",
    "\n",
    "*Plot the number of students in each school and number of students with different ages in separate plots.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "FPBcJEPvuHQj"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    349\n",
      "1     46\n",
      "Name: school, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(st_df[\"school\"])\n",
    "print(st_df[\"school\"].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zpl9q12IuHQo"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16    104\n",
      "17     98\n",
      "18     82\n",
      "15     82\n",
      "19     24\n",
      "20      3\n",
      "22      1\n",
      "21      1\n",
      "Name: age, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(st_df['age'])\n",
    "print(st_df[\"age\"].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "8UP-m3juuHQv"
   },
   "source": [
    "## Question 9 - Training and testing data split"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ePBT0v6TuHQw"
   },
   "source": [
    "*So far, you have converted all categorical features into numeric values. Now, split the data into training and test sets with training size of 300 records. Print the number of train and test records.*\n",
    "\n",
    "**Hint:** check **train_test_split()** from **sklearn**\n",
    "\n",
    "#### Answer:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Nu5ULZAVuHQz"
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.24, random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(300, 26)\n",
      "(95, 26)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "GHYII1QjuHQ3"
   },
   "source": [
    "## Question 10 - Model Implementation and Testing the Accuracy\n",
    "\n",
    "*Build a **LogisticRegression** classifier using **fit()** and **predict()** functions in sklearn. Print Accuracy and F1 score of Training and Test sets.*\n",
    "\n",
    "#### Answer:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic regression model using sklearn library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ne88xLZQuHQ4"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\arany\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    }
   ],
   "source": [
    "model = LogisticRegression()\n",
    "model.fit(X_train, y_train)\n",
    "y_predict = model.predict(X_test)\n",
    "model_score = model.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "sTNrahjVuHQ6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9052631578947369\n",
      "[[25  3]\n",
      " [ 6 61]]\n"
     ]
    }
   ],
   "source": [
    "print(model_score)\n",
    "print(metrics.confusion_matrix(y_test, y_predict))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "conf_mtx= metrics.confusion_matrix(y_test, y_predict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c9db5b2470>"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(conf_mtx,annot=True,cmap='Blues')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.84745763, 0.93129771])"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.f1_score(y_test, y_predict,average=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Vpy90Xe150sV"
   },
   "source": [
    "# Naive bayes with Iris data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Ymp7UMwnOgm0"
   },
   "source": [
    "### Import Iris.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "GNnaUGrjOgm1"
   },
   "outputs": [],
   "source": [
    "iris_df= pd.read_csv('Iris.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "EONPnnVBOgm9"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm      Species\n",
       "0   1            5.1           3.5            1.4           0.2  Iris-setosa\n",
       "1   2            4.9           3.0            1.4           0.2  Iris-setosa\n",
       "2   3            4.7           3.2            1.3           0.2  Iris-setosa\n",
       "3   4            4.6           3.1            1.5           0.2  Iris-setosa\n",
       "4   5            5.0           3.6            1.4           0.2  Iris-setosa"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "-o6lAxL3OgnC"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(150, 6)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "XVanNOb7OgnI"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Iris-versicolor    50\n",
       "Iris-setosa        50\n",
       "Iris-virginica     50\n",
       "Name: Species, dtype: int64"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris_df['Species'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "iris_df = iris_df.drop('Id',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm      Species\n",
       "0            5.1           3.5            1.4           0.2  Iris-setosa\n",
       "1            4.9           3.0            1.4           0.2  Iris-setosa\n",
       "2            4.7           3.2            1.3           0.2  Iris-setosa\n",
       "3            4.6           3.1            1.5           0.2  Iris-setosa\n",
       "4            5.0           3.6            1.4           0.2  Iris-setosa"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c9db64ab00>"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(data=iris_df,orient=\"h\", palette=\"BuGn_r\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "6UMrLVa9OgnM"
   },
   "source": [
    "### Slice data set for Independent variables and dependent variables\n",
    "#### Please note 'Species' is my dependent variables, name it y and independent set data as X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "YuqCZK2-OgnN"
   },
   "outputs": [],
   "source": [
    "X= iris_df.drop('Species', axis=1)\n",
    "y= iris_df['Species']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "oe4YSXwkOgnV"
   },
   "source": [
    "### Find the distribution of target variable (Class)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "65wA_xofOgnW"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iris-versicolor    50\n",
      "Iris-setosa        50\n",
      "Iris-virginica     50\n",
      "Name: Species, dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c9db6d44a8>"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(y.value_counts())\n",
    "sns.countplot(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "t386HtyCOgnb"
   },
   "source": [
    "### Plot the distribution of target variable using histogram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "1FbADzabOgnc"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c9db7369e8>"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.value_counts(iris_df[\"Species\"]).plot(kind=\"bar\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "AvPOo-YKOgng"
   },
   "source": [
    "### Plot Scatter Matrix to understand the distribution of variables and give insights from it( 1 Marks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x1c9db778400>"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 823.5x720 with 20 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.pairplot(iris_df, hue='Species')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "JgvP1rbgOgnh"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x1c9dc23bdd8>"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 823.5x180 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.pairplot(iris_df, x_vars=('SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm'),y_vars='Species',hue='Species')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Insights:\n",
    "       1. All the variables have some correlation with each other.\n",
    "       2. \"PetalLengthCm\" and \"PetalWidthCm\" are the most imp features to identify the class variable(diff types of flowers)\n",
    "       3. while \"iris-setosa\" can be easily identified \"iris-virginica\" and \"iris-versicolor\" have some overlap.    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "vkV6DZSLOgnm"
   },
   "source": [
    "### Summary Statistics and explain insights for at least 2 variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "NFpTN29OOgnn"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>150.00</td>\n",
       "      <td>150.00</td>\n",
       "      <td>150.00</td>\n",
       "      <td>150.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.84</td>\n",
       "      <td>3.05</td>\n",
       "      <td>3.76</td>\n",
       "      <td>1.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.83</td>\n",
       "      <td>0.43</td>\n",
       "      <td>1.76</td>\n",
       "      <td>0.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>4.30</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>5.10</td>\n",
       "      <td>2.80</td>\n",
       "      <td>1.60</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.80</td>\n",
       "      <td>3.00</td>\n",
       "      <td>4.35</td>\n",
       "      <td>1.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.40</td>\n",
       "      <td>3.30</td>\n",
       "      <td>5.10</td>\n",
       "      <td>1.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.90</td>\n",
       "      <td>4.40</td>\n",
       "      <td>6.90</td>\n",
       "      <td>2.50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm\n",
       "count         150.00        150.00         150.00        150.00\n",
       "mean            5.84          3.05           3.76          1.20\n",
       "std             0.83          0.43           1.76          0.76\n",
       "min             4.30          2.00           1.00          0.10\n",
       "25%             5.10          2.80           1.60          0.30\n",
       "50%             5.80          3.00           4.35          1.30\n",
       "75%             6.40          3.30           5.10          1.80\n",
       "max             7.90          4.40           6.90          2.50"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "round(iris_df.describe(),2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ypaLrqPsOgns"
   },
   "source": [
    "### Insights:\n",
    "     1.\"SepalLengthCm\" and \"SepalWidthCm\" are normally distributed as mean is almost equal to median of their distribution\n",
    "     2.\"PetalLengthCm\" has the highest variance.\n",
    "                "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "_MsXi4JROgnv"
   },
   "source": [
    "### Correlation among all variables and give your insights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ENUi26odOgnx"
   },
   "outputs": [],
   "source": [
    "corr=iris_df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <td>1.00</td>\n",
       "      <td>-0.11</td>\n",
       "      <td>0.87</td>\n",
       "      <td>0.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <td>-0.11</td>\n",
       "      <td>1.00</td>\n",
       "      <td>-0.42</td>\n",
       "      <td>-0.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <td>0.87</td>\n",
       "      <td>-0.42</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <td>0.82</td>\n",
       "      <td>-0.36</td>\n",
       "      <td>0.96</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm\n",
       "SepalLengthCm           1.00         -0.11           0.87          0.82\n",
       "SepalWidthCm           -0.11          1.00          -0.42         -0.36\n",
       "PetalLengthCm           0.87         -0.42           1.00          0.96\n",
       "PetalWidthCm            0.82         -0.36           0.96          1.00"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "round(corr,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c9dc5ee6a0>"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(corr, annot=True,cmap='cividis')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Insights :\n",
    "    1. PetalLengthCm and PetalWidthCm have very high correlation between them.\n",
    "    2. Also both PetalLengthCm and PetalWidthCm have very high correlation with SepalLengthCm\n",
    "    3. The model will do almost as good if we consider any one of the three for our final feature's list. Ideally PetalLengthCm or PetalWidthCm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ciKj4Zf6Ogn8"
   },
   "source": [
    "### Split data in Training and Validation in 80:20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "UAeLAItYOgn9"
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.2, random_state=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "1-a4C3w9OgoA"
   },
   "source": [
    "### Do Feature Scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "6-9z1toUOgoC"
   },
   "outputs": [],
   "source": [
    "X_train_scaled = preprocessing.scale(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_scaled = preprocessing.scale(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "miK8grUROgoI"
   },
   "source": [
    "### Train and Fit NaiveBayes Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "29HTCg2POgoL"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GaussianNB(priors=None)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = GaussianNB()\n",
    "model.fit(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "96wnWGX8OgoR"
   },
   "outputs": [],
   "source": [
    "actual = y_test\n",
    "predicted = model.predict(X_test_scaled)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "zkbFn_g-OgoY"
   },
   "source": [
    "### Print Accuracy and Confusion Matrix and Conclude your findings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "y2kBUikzOgoZ"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 precision    recall  f1-score   support\n",
      "\n",
      "    Iris-setosa       1.00      1.00      1.00        11\n",
      "Iris-versicolor       1.00      0.77      0.87        13\n",
      " Iris-virginica       0.67      1.00      0.80         6\n",
      "\n",
      "    avg / total       0.93      0.90      0.90        30\n",
      "\n",
      "[[11  0  0]\n",
      " [ 0 10  3]\n",
      " [ 0  0  6]]\n"
     ]
    }
   ],
   "source": [
    "print(metrics.classification_report(actual, predicted))\n",
    "print(metrics.confusion_matrix(actual, predicted))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "mQZ7Xz8SOgoe"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.score(X_test_scaled, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "fy7LN9ZuOgoi"
   },
   "source": [
    "### Insights :\n",
    "        1. Precision is intuitively the ability of the classifier not to label as positive a sample that is negative. When samples are not Iris-setosa or Iris-versicolor, the model identifies them correctly 100% of the times where as when the sample is not Iris-virginica,67% of the times, the model identifies them correctly.\n",
    "        2. Recall is intuitively the ability of the classifier to find all the positive samples. When the samples are Iris-setosa or Iris-virginica, the model identifies them 100% of the times where as when the sample is Iris-versicolor, the model identifies them correctly 77% of the times.\n",
    "        3. The overall accuracy for the model is 90% which suggests 9 out of 10 times the model will classify correctly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "name": "R3_External_Lab_Logistic_and_Naive_bayes_questions.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
